--- OPTIONAL PLUGIN LIST ---
- tpope/vim-endwise
- tpope/vim-rsi
- w0rp/ale (LOOK AT SETTINGS: https://github.com/w0rp/ale) (gvimrc has good settings)
- SirVer/ultisnips + honza/vim-snippets
- this part from tpope's vimrc (https://github.com/tpope/tpope/blob/master/.vimrc#L343) and this guy's vimrc (https://github.com/DarkUlixes/dotfiles/blob/master/vimrc#L27)

--- FT-SETTINGS ---

MORE SETTINGS! (FOR LANGUAGES YOU'LL NEVER USE)
Go:
	- GoFMT will do all the formating for you, so no need to add any filetype specific settings
	- set completeopt-=preview
	- dispatch = 'go build % && ./%:r' OR you could use vim-go's go build/go run AS LONG AS THERE ARE NO C FILES IN YOUR CURRENT DIRECTORY

Haskell:
	- tabs = spaces, 4 characters
	- line lengths = 80
	- dispatch = 'ghc % -o %:r && ./%:r'
	- and if all else fails, here's UPenn's two cents... https://www.seas.upenn.edu/~cis552/12fa/styleguide.html

--- LANGUAGE SPECIFIC PLUGINS ---
C/C++:
- justinmk/vim-syntax-extra (C)
- octol/vim-cpp-enhanced-highlight (C++)
- Shougo/deoplete-clangx
- vim-scripts/a.vim

Go:
- Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
- Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
- let g:deoplete#sources#go#gocode_binary = '/path/to/gocode (usually in go path)'
- OR USE GOCODE PLUGIN (Plug 'nsf/gocode')???

Haskell:
- eagletmt/neco-ghc
- neovimhaskell/haskell.vim

Markdown:
- junegunn/goyo.vim (no settings necessary)
- set noshowmode
- suan/vim-instant-markdown

Python:
- davidhalter/jedi-vim
- Yggdroot/indentLine

PLUGINS TO TRY OUT:
- irrationalistic/vim-tasks
- mtth/scratch.vim
- tpope/vim-endwise
- vimwiki/vimwiki

vimrc from the i3/C++ video: https://gist.github.com/anonymous/27648a4d6f4f271cf030d5207f7b80d1

USE ALTERNATIVE KEYBINDINGS!
- ZZ for save and quit
- Ctrl-R registers! (http://vimdoc.sourceforge.net/htmldoc/insert.html#i_CTRL-R)

If you ever want a statusline...
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?' Git('.l:branchname.') ':''
endfunction

set laststatus=2
set statusline=

set statusline+=%f
set statusline+=\ %y
set statusline+=%{StatuslineGit()}
set statusline+=%m
set statusline+=%r
set statusline+=%=
set statusline+=\ %l,%c
set statusline+=\ ::
set statusline+=\ %p%%

